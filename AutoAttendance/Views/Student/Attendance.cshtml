@model IEnumerable<AutoAttendance.Models.Student>

@{
    ViewBag.Title = "Attendance Sheet";
    <div class="text-danger">
        <h3>@ViewBag.Message</h3>
    </div>
    <div class="text-success">
        <h3>@ViewBag.ActionMessage</h3>
    </div>
}

<!-- Search Form -->
<form id="labnol" method="post">
    <h2>Attendance Sheet
    <input type="hidden" name="speech" id="transcript" placeholder="Speak" />
    <img onclick="startDictation()" src="//i.imgur.com/cHidSVu.gif" />

    </h2>
</form>

@using (Html.BeginForm())
{
    
    <div class="form-group" method="post">
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ClassName)
                </th>
                <th>
                    @Html.ActionLink("Id", "Attendance", new { sortOrder = ViewBag.idSortParm, className = ViewBag.className })
                </th>
                <th>
                    @Html.ActionLink("Name", "Attendance", new { sortOrder = ViewBag.NameSortParm, className = ViewBag.className })
                </th>
                <th>
                    Present
                </th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ClassName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        <input type="checkbox" name="Present" value="@(item.Id)" id="@(item.Id)">
                    </td>
                </tr>

                string studID = item.Id;
                string studName = item.Name;

                //var myList = new Array();
                //myList.push('Hello');

            }
        </table>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-md-10">
                @Html.ActionLink("View Another Class", "IndexAttendance", "ClassName", null, new { @class = "btn btn-default" })
                <input type="submit" value="Download" name="submitButton" class="btn btn-default" />
                <input type="submit" value="Email" name="submitButton" class="btn btn-default" />
            </div>

        </div>
    </div>

}

<!-- CSS Styles -->
<style>
    .speech {
        border: 1px solid #DDD;
        width: 300px;
        padding: 0;
        margin: 0;
    }

        .speech input {
            border: 0;
            width: 240px;
            display: inline-block;
            height: 30px;
        }

        .speech img {
            float: right;
            width: 40px;
        }
</style>

<!-- HTML5 Speech Recognition API -->
<script>

    var currentId = "";

    function startDictation() {

        if (window.hasOwnProperty('webkitSpeechRecognition')) {

            var studList = [];
            var map = new Object();

            var names = "";
            @foreach (AutoAttendance.Models.Student stud in Model)
            {
                <text>
                    map["@stud.Name"] = "@stud.Id";
                </text>
            }

            var recognition = new webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = false;

            recognition.lang = "en-US";
            recognition.start();
            recognition.onresult = function (e) {
                var currentStud = "";
                
                for (var i = e.resultIndex; i < e.results.length; ++i) {
                    if (e.results[i].isFinal) {
                        var word = e.results[i][0].transcript;
                        word = word.trim();
                        if (word == "yes" || word == "yes sir" || word == "yes mam" || word == "present") {
                            document.getElementById(currentId).checked = true;
                        } else {
                            currentId = map[word];
                        }
                    }
                }
            }
        }
    }


    function speak(text, callback) {
        var u = new SpeechSynthesisUtterance();
        u.text = text;
        u.lang = 'en-US';

        u.onend = function () {
            if (callback) {
                callback();
            }
        };

        u.onerror = function (e) {
            if (callback) {
                callback(e);
            }
        };

        speechSynthesis.speak(u);
    }

    function sleep(milliseconds) {
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    }

</script>
  
